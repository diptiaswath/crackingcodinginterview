// https://leetcode.com/explore/featured/card/leetcodes-interview-crash-course-data-structures-and-algorithms/703/arraystrings/4502/


// 1. Find the longest sub-array with a sum less than or equal to k
// 2. Find the longest substring that has at most one "0"
// 3. Find the number of sub-arrays that have a product less than k

// 1. Find the longest sub-array with a sum less than or equal to k
public int findLength(int[] nums, int k) {
    int left = 0;
    int curr = 0; // curr is the current sum of the window
    int ans = 0;

    for (int right = 0; right < nums.length; right++) {
        curr += nums[right];
        while (curr > k) {
            curr -= nums[left];
            left++;
        }

        ans = Math.max(ans, right - left + 1);
    }

    return ans;
}

// 2. Find the longest substring that has atmost one "0"
public int findLength(String s) {
    // curr is the current number of zeros in the window
    int left = 0;
    int curr = 0;
    int ans = 0;

    for (int right = 0; right < s.length(); right++) {
        if (s.charAt(right)== '0') {
            curr++;
        }

        while (curr > 1) {
            if (s.charAt(left) == '0') {
                curr--;
            }

            left++;
        }

        ans = Math.max(ans, right - left + 1);
    }

    return ans;
}

// 3. Find the number of sub-arrays that have a product less than k
class Solution {
    public int numSubarrayProductLessThanK(int[] nums, int k) {
        if (k <= 1) {
            return 0;
        }

        int ans = 0;
        int left = 0;
        int curr = 1;

        for (int right = 0; right < nums.length; right++) {
            curr *= nums[right];
            while (curr >= k) {
                curr /= nums[left];
                left++;
            }

            ans += right - left + 1;
        }

        return ans;
    }
}

// FIXED WINDOW OF LENGTH = k
// 4. Example 4: Given an integer array nums and an integer k, find the sum of the subarray with the largest sum whose length is k.
// Sliding window length is fixed = k

public int findBestSubarrayWithLargestSumOfLengthK(int[] nums, int k) {
    int curr = 0;
    for (int i = 0; i < k; i++) {
        curr += nums[i];
    }

    int ans = curr;
    for (int i = k; i < nums.length; i++) {
        curr += nums[i] - nums[i - k];
        ans = Math.max(ans, curr);
    }

    return ans;
}